config {
  type: "incremental",
  schema: "monitoramento_staging",
  name: "gps_segmento_viagem",
  tags: ["validacao_smtr", "monitoramento_viagem"],
  bigquery: {
    partitionBy: "data"
  }
}

pre_operations {
  DECLARE gtfs_feeds ARRAY<DATE>;

  SET gtfs_feeds = (
    SELECT ARRAY_AGG(feed_start_date)
    FROM (
      SELECT DISTINCT feed_start_date
      FROM ${ref("planejamento", "calendario")}
      ${when(
        incremental(),
        `WHERE data BETWEEN DATE(${constants.date_range_start}) AND DATE(${constants.date_range_end})`
      )}
    )
  );
}

with
    calendario as (
        select *
        from ${ref("calendario")}        
        ${when(
            incremental(),
            `where data between date(${constants.date_range_start}) and date(${constants.date_range_end})`
        )} 
    ),
    gps_viagem as (
        select
            data,
            gv.id_viagem,
            gv.shape_id,
            gv.geo_point_gps,
            c.feed_version,
            c.feed_start_date
        from ${ref("gps_viagem")} gv
        join calendario c using (data)
        ${when(
            incremental(),
            `where data between date(${constants.date_range_start}) and date(${constants.date_range_end})`
        )} 
    ),
    segmento as (
        select
            feed_version,
            feed_start_date,
            feed_end_date,
            shape_id,
            id_segmento,
            buffer,
            indicador_segmento_desconsiderado
        from ${ref("segmento_shape")}
        ${when(
            incremental(),
            `WHERE feed_start_date IN UNNEST(gtfs_feeds)`
        )}
    ),
    gps_segmento as (
        select 
            g.id_viagem, 
            g.shape_id, 
            s.id_segmento, 
            count(*) as quantidade_gps
        from gps_viagem g
        join segmento s
        on g.feed_version = s.feed_version
        and g.shape_id = s.shape_id
        and st_intersects(s.buffer, g.geo_point_gps)
        group by 1, 2, 3
    ),
    viagem as (
        select
            data,
            v.id_viagem,
            v.datetime_partida,
            v.datetime_chegada,
            v.modo,
            v.id_veiculo,
            v.trip_id,
            v.route_id,
            v.shape_id,
            v.servico,
            v.sentido,
            c.service_ids,
            c.tipo_dia,
            c.feed_start_date,
            c.feed_version
        from ${ref("viagem_informada")} v
        join calendario c using (data)
        ${when(
            incremental(),
            `where data between date(${constants.date_range_start}) and date(${constants.date_range_end})`
            )} 
    ),
    viagem_segmento as (
        select
            v.data,
            v.id_viagem,
            v.datetime_partida,
            v.datetime_chegada,
            v.modo,
            v.id_veiculo,
            v.trip_id,
            v.route_id,
            shape_id,
            s.id_segmento,
            s.indicador_segmento_desconsiderado,
            v.servico,
            v.sentido,
            v.service_ids,
            v.tipo_dia,
            feed_version,
            feed_start_date
        from viagem v
        join segmento s using (shape_id, feed_version, feed_start_date)
    )
select
    v.data,
    id_viagem,
    v.datetime_partida,
    v.datetime_chegada,
    v.modo,
    v.id_veiculo,
    v.trip_id,
    v.route_id,
    shape_id,
    id_segmento,
    v.indicador_segmento_desconsiderado,
    v.servico,
    v.sentido,
    ifnull(g.quantidade_gps, 0) as quantidade_gps,
    v.feed_version,
    v.feed_start_date,
    v.service_ids,
    v.tipo_dia,
    '' as versao,
    current_datetime("America/Sao_Paulo") as datetime_ultima_atualizacao
from viagem_segmento v
left join gps_segmento g using (id_viagem, shape_id, id_segmento)
${when(
    incremental(),
    '',
    `where v.data <= date_sub(current_date("America/Sao_Paulo"), interval 2 day)`
)}